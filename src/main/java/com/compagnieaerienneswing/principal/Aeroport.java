/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.compagnieaerienneswing.principal;

import com.compagnieaerienneswing.dao.AeroportDAO;
import com.compagnieaerienneswing.dao.MySQL;
import com.compagnieaerienneswing.dao.PaysDAO;
import static java.lang.Integer.parseInt;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author damie
 */
public class Aeroport extends javax.swing.JFrame {

    private int id;
    private String name;
    private String city;
    private int idPays;
    
    public Aeroport(int id, String name, String city, int idPays) {       
        this.id = id;
        this.name = name;
        this.city = city;
        this.idPays = idPays;
    }
    
    @Override
    public String toString() {
        PaysDAO pays = new PaysDAO();
        String query = String.format("SELECT * FROM pays WHERE idPays = %s", idPays);
        ArrayList<Pays> paysList = pays.select(query);
        String nomPays = paysList.get(0).getName();
        
        return String.format("%s, %s, %s", name, city, nomPays);
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }
    
    public String getCity() {
        return city;
    }
    
    public int getIdPays() {
        return idPays;
    }
    
    /**
     * Creates new form Aeroport
     */
    public Aeroport() {
        initComponents();       
        loadAirportData();
        loadCountryData();
    }
    
    private void loadAirportData(){        
        AeroportDAO aeroport = new AeroportDAO();
        String query = "SELECT * FROM aeroport";
        ArrayList<Aeroport> aeroportList = aeroport.select(query);
        DefaultTableModel model = (DefaultTableModel) tableAeroport.getModel();
        
        for (int i = 0; i < aeroportList.size(); i++){
            int id = aeroportList.get(i).getId();
            String nom = aeroportList.get(i).getName();
            String ville = aeroportList.get(i).getCity();
            int idPays = aeroportList.get(i).getIdPays();
            
            Object[] row = { id, nom, ville, idPays};          
            model.addRow(row);
        }
    }
    
    // Load countries data
    private void loadCountryData() {      
        PaysDAO pays = new PaysDAO();
        String query = "SELECT * FROM pays ORDER BY nom";
        ArrayList<Pays> paysList = pays.select(query);
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        
        // Alimente la combo box des pays
        for (int i = 0; i < paysList.size(); i++){
            int id = paysList.get(i).getId();
            String name = paysList.get(i).getName();
            
            model.addElement(new Pays(id, name));
        }

        comboPays.setModel(model);
    }
    
    // Reset the table
    private void reset(){
        DefaultTableModel model = (DefaultTableModel) tableAeroport.getModel();
        int row = model.getRowCount();
        
        if (row > 0){
            for (int i = 0; i < row; i++){
                model.removeRow(0);
            }
        }
    }
    
    private boolean isNullOrEmpty(String str){
        if (str == null || str.length() == 0){
            return true;
        }
        return false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        textNom = new javax.swing.JTextField();
        textVille = new javax.swing.JTextField();
        comboPays = new javax.swing.JComboBox<>();
        btnDelete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableAeroport = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuCreateAccount = new javax.swing.JMenu();
        menuManageAccount = new javax.swing.JMenu();
        menuAirport = new javax.swing.JMenu();
        menuAirline = new javax.swing.JMenu();
        menuCountry = new javax.swing.JMenu();
        menuBooking = new javax.swing.JMenu();
        menuFlight = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Ajouter un aéroport");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 60, 120, 50));

        jLabel2.setText("Pays");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 230, -1, -1));

        jLabel3.setText("Nom");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 130, -1, -1));

        jLabel4.setText("Ville");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 180, -1, -1));
        getContentPane().add(textNom, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 120, 210, 40));
        getContentPane().add(textVille, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 170, 210, 40));

        comboPays.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                comboPaysMouseClicked(evt);
            }
        });
        comboPays.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboPaysActionPerformed(evt);
            }
        });
        getContentPane().add(comboPays, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 220, 210, 40));

        btnDelete.setText("DELETE");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        getContentPane().add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 350, -1, -1));

        tableAeroport.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nom", "Ville", "idPays"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableAeroport);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 310, 350, 310));

        btnAdd.setText("Ajouter");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        getContentPane().add(btnAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 270, -1, -1));

        btnUpdate.setText("UPDATE");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        getContentPane().add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 310, -1, -1));

        menuCreateAccount.setText("Créer un compte client");
        menuCreateAccount.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuCreateAccountMouseClicked(evt);
            }
        });
        jMenuBar1.add(menuCreateAccount);

        menuManageAccount.setText("Gestion du compte");
        menuManageAccount.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuManageAccountMouseClicked(evt);
            }
        });
        jMenuBar1.add(menuManageAccount);

        menuAirport.setText("Aéroport");
        menuAirport.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuAirportMouseClicked(evt);
            }
        });
        jMenuBar1.add(menuAirport);

        menuAirline.setText("Compagnie");
        menuAirline.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                menuAirlineMenuSelected(evt);
            }
        });
        jMenuBar1.add(menuAirline);

        menuCountry.setText("Pays");
        menuCountry.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuCountryMouseClicked(evt);
            }
        });
        jMenuBar1.add(menuCountry);

        menuBooking.setText("Réservation");
        menuBooking.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuBookingMouseClicked(evt);
            }
        });
        jMenuBar1.add(menuBooking);

        menuFlight.setText("Vol");
        menuFlight.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuFlightMouseClicked(evt);
            }
        });
        jMenuBar1.add(menuFlight);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Insert a new airport into the database
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        try{                       
            Object item = comboPays.getSelectedItem();            
            int idPays = ((Pays)item).getId();
            
            String nom = textNom.getText();
            String ville = textVille.getText(); 
            
            if (isNullOrEmpty(nom) || isNullOrEmpty(ville) )
                throw new Exception("Tous les champs sont requis.");
            
            AeroportDAO aeroportDao = new AeroportDAO();
            String sql = String.format("SELECT * FROM aeroport WHERE nom LIKE '%s' AND ville LIKE '%s' AND idPays = %s", nom, ville, idPays);
            ArrayList<Aeroport> aeroportList = aeroportDao.select(sql);
            
            if (aeroportList.size() > 0)
                throw new Exception("L'aéroport existe déjà dans la base de données !");
            
            MySQL mySql = new MySQL();
            sql = String.format("INSERT INTO aeroport VALUES (default, '%s', '%s', '%s')", nom, ville, idPays);
            String insertAirport = mySql.insert(sql);
            
            if (insertAirport != "OK")
                throw new Exception("Une erreur est survenue ! L'aéroport n'a pas été ajouté.");
            
            JOptionPane.showMessageDialog(null, "L'aéroport a été ajouté !");
            reset();
            loadAirportData();
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnAddActionPerformed

    // Update an existing airport from the database
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try{
            int row = tableAeroport.getSelectedRow();
            int idCol = tableAeroport.getColumn("ID").getModelIndex();
            int nomCol = tableAeroport.getColumn("Nom").getModelIndex();
            int villeCol = tableAeroport.getColumn("Ville").getModelIndex();

            String id = tableAeroport.getModel().getValueAt(row, idCol).toString();
            String nom = tableAeroport.getModel().getValueAt(row, nomCol).toString();
            String ville = tableAeroport.getModel().getValueAt(row, villeCol).toString();

            MySQL mySql = new MySQL();
            String sql = String.format("UPDATE aeroport SET nom = '%s', ville = '%s' WHERE idaeroport = %s", nom, ville, id);
            String str = mySql.update(sql);
            
            if(str != "OK"){
                throw new Exception(str);
            }
            
            reset();
            loadAirportData();
            JOptionPane.showMessageDialog(null, "L'aéroport a correctement été mis à jour !");
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    // Delete an existing airport from the database
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try{
            int row = tableAeroport.getSelectedRow();
            int idCol = tableAeroport.getColumn("ID").getModelIndex();
            String id = tableAeroport.getModel().getValueAt(row, idCol).toString();

            MySQL mySql = new MySQL();
            String sql = String.format("DELETE FROM aeroport WHERE idaeroport = %s", id);
            String str = mySql.delete(sql);
            
            if(str != "OK"){
                throw new Exception(str);
            }
            
            reset();
            loadAirportData();
            JOptionPane.showMessageDialog(null, "L'aéroport a correctement été supprimé !");
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void menuCreateAccountMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuCreateAccountMouseClicked
        new Client().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_menuCreateAccountMouseClicked

    private void menuManageAccountMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuManageAccountMouseClicked
        new Compte().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_menuManageAccountMouseClicked

    private void menuAirportMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuAirportMouseClicked
        new Aeroport().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_menuAirportMouseClicked

    private void menuAirlineMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_menuAirlineMenuSelected
        new Compagnie().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_menuAirlineMenuSelected

    private void menuCountryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuCountryMouseClicked
        new Pays().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_menuCountryMouseClicked

    private void menuBookingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuBookingMouseClicked
        new Reservation().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_menuBookingMouseClicked

    private void menuFlightMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuFlightMouseClicked
        new Vol().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_menuFlightMouseClicked

    private void comboPaysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboPaysActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboPaysActionPerformed

    private void comboPaysMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_comboPaysMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_comboPaysMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Aeroport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Aeroport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Aeroport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Aeroport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Aeroport().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> comboPays;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenu menuAirline;
    private javax.swing.JMenu menuAirport;
    private javax.swing.JMenu menuBooking;
    private javax.swing.JMenu menuCountry;
    private javax.swing.JMenu menuCreateAccount;
    private javax.swing.JMenu menuFlight;
    private javax.swing.JMenu menuManageAccount;
    private javax.swing.JTable tableAeroport;
    private javax.swing.JTextField textNom;
    private javax.swing.JTextField textVille;
    // End of variables declaration//GEN-END:variables
}
